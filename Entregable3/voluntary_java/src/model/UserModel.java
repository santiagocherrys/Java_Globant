package model;

import database.CRUD;
import database.ConfigDB;
import entity.User;
import helper.Role;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserModel implements CRUD {
    @Override
    public Object insert(Object obj) {

        //1. Open the connection
        Connection objConnection = ConfigDB.openConnection();

        //2. Convert to oj to User
        User objUser = (User) obj;

        try{
            //3. Write the SQL
            String sql = "INSERT INTO users(name, email, password, role) VALUES (?, ?, ?, ?)";

            //4.prepare the Statement, and Add the property RETURN_GENERATED_KEYS that returns the id generated by the database
            //After de insertion it returns the id of the database generated
            PreparedStatement objPrepare = objConnection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);

            //5. values of ? ? ?
            objPrepare.setString(1, objUser.getName());
            objPrepare.setString(2, objUser.getEmail());
            objPrepare.setString(3, objUser.getPassword());
            objPrepare.setString(4, objUser.getRole().name());

            //6. Execute the Query
            objPrepare.execute();

            //7. Obtain the result with its id(generated id)
            ResultSet objRest = objPrepare.getGeneratedKeys();

            //8. Loop while there is a register
            while(objRest.next()){
                objUser.setId(objRest.getInt(1));
            }

            JOptionPane.showMessageDialog(null, "Usee insertion was successful");
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        //Close the connection
        ConfigDB.closeConnection();
        return objUser;
    }

    @Override
    public List<Object> findAll() {
        //1. Crete a list fr saving the return of the database
        List<Object> listUsers = new ArrayList<>();

        //2.Open the connection
        Connection objConnection = ConfigDB.openConnection();

        try{
            //3.write the query in Sql
            String sql = "SELECT * FROM users;";

            //4. Use the prepareStatement
            PreparedStatement objPrepare = objConnection.prepareStatement(sql);

            //5.Execute the query and obtain the result(ResultSet)

            ResultSet objResult = objPrepare.executeQuery();

            //6. while there is a result
            while(objResult.next()){

                //6.1 Create a user
                User objUser = new User();

                objUser.setId(objResult.getInt("id"));
                objUser.setName(objResult.getString("name"));
                objUser.setEmail(objResult.getString("email"));
                objUser.setPassword(objResult.getString("password"));
                objUser.setRole(Role.valueOf(objResult.getString("role")));

                listUsers.add(objUser);

            }
        }catch (SQLException error){
            JOptionPane.showMessageDialog(null, error.getMessage());
        }
        ConfigDB.closeConnection();
        return listUsers;
    }

    @Override
    public boolean update(Object obj) {
        //1. Open the connection
        Connection objConnection = ConfigDB.openConnection();

        //2. Convert to a User
        User objUser = (User) obj;

        //3. Variable to know the state of the action
        boolean isUpdated = false;

        try{
            //4. Create the sql query
            String sql = "UPDATE users set name = ?, email = ?, password = ?, role = ? WHERE id = ?;";

            //5. Create the statement
            PreparedStatement objPrepare = objConnection.prepareStatement(sql);

            //6. set value to the parameter of the Query
            objPrepare.setString(1, objUser.getName());
            objPrepare.setString(2, objUser.getEmail());
            objPrepare.setString(3, objUser.getPassword());
            objPrepare.setString(4, objUser.getRole().name());
            objPrepare.setInt(5, objUser.getId());

            //7. Execute the query
            //Execute  -> return boolean
            //ExecuteUpdate -> return the raws affected
            //ExecuteQuery -> return the result

            int totalRowAffected = objPrepare.executeUpdate();

            if(totalRowAffected >0){
                isUpdated = true;
                JOptionPane.showMessageDialog(null, "The update was successful. ");
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }finally {
            ConfigDB.closeConnection();
        }

        return isUpdated;
    }

    @Override
    public boolean delete(Object obj) {
        //Convert the object to entity
        User objUser = (User) obj;

        //2. Open the connection
        Connection objConnection = ConfigDB.openConnection();

        //3. Creaqte a variable of state
        boolean isDeleted = false;

        try{
            //4. write the SQL Query
            String sql = "DELETE FROM users WHERE id= ?;";

            //5. Create the prepare statement
            PreparedStatement objPrepare = objConnection.prepareStatement(sql);

            //6. Give value to ?
            objPrepare.setInt(1, objUser.getId());

            //7.Execute the Query.
            int totalAffectedRows = objPrepare.executeUpdate();

            if(totalAffectedRows > 0){
                isDeleted = true;
                JOptionPane.showMessageDialog(null, "The update was successful");
            }

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        //Close connection
        ConfigDB.closeConnection();
        return isDeleted;
    }

    public User findById(int id){
        //1. open the connection
        Connection objConnection = ConfigDB.openConnection();

        //2. Create the user that we are going to return
        User objUser = null;

        try{
            //3. sentence SQL
            String sql = "SELECT * FROM users WHERE id = ?;";

            //4. Prepare the statement
            PreparedStatement objPrepare = objConnection.prepareStatement(sql);

            //5. Give the value to the query parameter
            objPrepare.setInt(1, id);

            //6. Execute Query
            ResultSet objResult = objPrepare.executeQuery();

            if(objResult.next()){
                objUser = new User();
                objUser.setName(objResult.getString("name"));
                objUser.setEmail(objResult.getString("email"));
                objUser.setPassword(objResult.getString("password"));
                objUser.setRole(Role.valueOf(objResult.getString("role")));
                objUser.setId(objResult.getInt("id"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        //8. Close the connection
        ConfigDB.closeConnection();
        return objUser;
    }

}
